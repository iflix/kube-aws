// Code generated by "enumer -type ShellColour -yaml -transform kebab"; DO NOT EDIT

package model

import (
	"fmt"
)

const _ShellColourName = "default-colourblackredgreenyellowbluemagentacyanwhitedark-graylight-redlight-greenlight-yellowlight-bluelight-magentalight-cyanlight-white"

var _ShellColourIndex = [...]uint8{0, 14, 19, 22, 27, 33, 37, 44, 48, 53, 62, 71, 82, 94, 104, 117, 127, 138}

func (i ShellColour) String() string {
	if i < 0 || i >= ShellColour(len(_ShellColourIndex)-1) {
		return fmt.Sprintf("ShellColour(%d)", i)
	}
	return _ShellColourName[_ShellColourIndex[i]:_ShellColourIndex[i+1]]
}

var _ShellColourValues = []ShellColour{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}

var _ShellColourNameToValueMap = map[string]ShellColour{
	_ShellColourName[0:14]:    0,
	_ShellColourName[14:19]:   1,
	_ShellColourName[19:22]:   2,
	_ShellColourName[22:27]:   3,
	_ShellColourName[27:33]:   4,
	_ShellColourName[33:37]:   5,
	_ShellColourName[37:44]:   6,
	_ShellColourName[44:48]:   7,
	_ShellColourName[48:53]:   8,
	_ShellColourName[53:62]:   9,
	_ShellColourName[62:71]:   10,
	_ShellColourName[71:82]:   11,
	_ShellColourName[82:94]:   12,
	_ShellColourName[94:104]:  13,
	_ShellColourName[104:117]: 14,
	_ShellColourName[117:127]: 15,
	_ShellColourName[127:138]: 16,
}

// ShellColourString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ShellColourString(s string) (ShellColour, error) {
	if val, ok := _ShellColourNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ShellColour values", s)
}

// ShellColourValues returns all values of the enum
func ShellColourValues() []ShellColour {
	return _ShellColourValues
}

// IsAShellColour returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ShellColour) IsAShellColour() bool {
	for _, v := range _ShellColourValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for ShellColour
func (i ShellColour) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ShellColour
func (i *ShellColour) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ShellColourString(s)
	return err
}
